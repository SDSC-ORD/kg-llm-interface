apiVersion: apps/v1
kind: Deployment
metadata:
  name: kg-llm
  namespace: kg-llm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kg-llm
  template:
    metadata:
      labels:
        app: kg-llm
    spec:
      restartPolicy: Always
      containers:
      - name: kg-llm-container
        image: ghcr.io/sdsc-ordes/kg-llm-interface:latest
        env:
        - name: GRAPHDB_HOST
          value: "servicename.servicenamespace.svc.cluster.local"
        - name: GRAPHDB_PORT
          value: "0"
        - name: GRAPHDB_REPO
          value: "test"
        - name: SPARQL_ENDPOINT
          value: "http://$(GRAPHDB_HOST):$(GRAPHDB_PORT)/repositories/$(GRAPHDB_REPO)"
        - name: CHROMA_HOST
          value: "servicename.servicenamespace.svc.cluster.local"
        - name: CHROMA_PORT
          value: "0"
        - name: OPENAI_API_KEY
          value: "0"
        ports:
        - containerPort: 80
      initContainers:
      - name: graphdb-upload-container
        image: ghcr.io/sdsc-ordes/kg-llm-interface:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          cd /app;
          # setup graphdb
          curl -v -u admin:admin -X POST http://${GRAPHDB_HOST}:${GRAPHDB_PORT}/rest/repositories -H 'Content-Type: multipart/form-data' -F config=@/app/graphdb_config.ttl || true;
          export SPARQL_ENDPOINT="http://${GRAPHDB_HOST}:${GRAPHDB_PORT}/repositories/test";
          # download and uncompress nq.gz instance data
          wget -O - ${DATA} | gzip -dc > sample.nq;
          # download nt ontology and inject named graph -> combine with instance as nq
          wget -O - ${ONTOLOGY} | sed 's|^\(.*\) \.|\1 <https://www.pokemonkg.org/ontology/> .|' >> sample.nq ;
          poetry run python3 aikg/flows/insert_triples.py /app/sample.nq;
        volumeMounts:
        - name: graphdb-repo-config-volume
          mountPath: /app/graphdb_config.ttl
          subPath: graphdb_config.ttl
        env:
        - name: GRAPHDB_HOST
          value: graphdb_host_placeholder
        - name: GRAPHDB_PORT
          value: graphdb_port_placeholder
        envFrom:
        - configMapRef:
            name: kg-llm-config
      - name: chroma-upload-container
        image: ghcr.io/sdsc-ordes/kg-llm-interface:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e;
          cd /app;
          wget -O ontology.nt ${ONTOLOGY};
          echo "endpoint: ontology.nt" > ontology.yaml
          poetry run python3 aikg/flows/chroma_build.py --sparql-cfg-path ontology.yaml;
        env:
        - name: CHROMA_HOST
          value: chroma_host_placeholder
        - name: CHROMA_PORT
          value: chroma_port_placeholder
        envFrom:
        - configMapRef:
            name: kg-llm-config

      volumes:
      - name: graphdb-repo-config-volume
        configMap:
          name: graphdb-repo-config
